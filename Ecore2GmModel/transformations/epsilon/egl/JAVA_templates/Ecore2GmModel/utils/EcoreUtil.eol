@cached
operation getNodes() {
	return EClass.all.select(c|c.isNode());	
}

@cached
operation getPhantomNodes() {
	return EClass.all.select(c|c.isPhantom());
}

@cached
operation getLinks() {
	return EClass.all.select(c|c.isLink());
}

@cached
operation getLabelledAttributesFor(class : EClass) {
	return class.eAllAttributes.select(a|a.isLabelled());	
}

@cached
operation getReferenceLinks() {
	var diagramClass := getDiagramClass();
	if (diagramClass.dotationValue('gmf.diagram', 'refsarelinks') = 'true') {
		return EReference.all.select(r|r.containment = false);
	}
	else {
		return EReference.all.select(r|r.isLink());
	}
}

@cached
operation EClass getAllConcreteSubTypes() { 
	return EClass.all.select(c|not c.abstract and c.eAllSuperTypes.includes(self));
}

operation getDiagramClass() : EClass {
	return EClass.all.selectOne(c|c.isAnnotatedAs('gmf.diagram'));
}

operation getDiagramContainmentReference(class : EClass) {
	for (ref in getDiagramClass().getContainmentReferences()){
		if (class.eAllSuperTypes.includes(ref.eType) or class = ref.eType) return ref;
	}
}

operation getOneSuitableContainmentReference(class : EClass) {
	for (ref in EReference.all.select(sf|sf.containment)){
		if (class.eAllSuperTypes.includes(ref.eType) or class = ref.eType) return ref;
	}
}

@cached
operation getAllSuitableContainmentReferences(class : EClass) {
	var suitableReferences : Sequence;
	for (ref in EReference.all.select(sf|sf.containment)){
		if (class.eAllSuperTypes.includes(ref.eType) or class = ref.eType) 
			suitableReferences.add(ref);
	}
	return suitableReferences;
}

@cached
operation EClass getContainmentReferences() {
	return self.eAllStructuralFeatures.select(sf : EReference | sf.containment);
}

@cached
operation EClass getCompartmentReferences() {
	return self.getContainmentReferences().select(r|r.isAnnotatedAs('gmf.compartment'));
}

@cached
operation EClass getAffixedReferences() {
	return self.getContainmentReferences().select(r|r.isAnnotatedAs('gmf.affixed'));
}

@cached
operation EReference isListLayout() : Boolean {
	var label := self.getAnnotationValue('gmf.compartment', 'layout');
	if (label = 'list') return true;
	else return false;
}

@cached
operation EReference isCollapsible() : Boolean {
	var label := self.getAnnotationValue('gmf.compartment', 'collapsible');
	if (label = 'false') return false;
	else return true;
}

@cached
operation EReference getLinkLabel() : String {
	var customText := self.getAnnotationValue('gmf.link', 'label.text');
	if (customText.isDefined()) {
		return customText;
	}

	return self.getAnnotationValue('gmf.link', 'label');
}

@cached
operation EReference getLongName() : String {
	return self.eContainingClass.name + self.name.firstToUpperCase();
}

@cached
operation EReference getLinkIncoming() : Boolean {
	return self.getAnnotationValue('gmf.link', 'incoming') = 'true';
}

@cached
operation EClass getConcreteSubtypes() {
	return EClass.all.select(e|(not e.abstract) and (e.eAllSuperTypes.includes(self) or e = self));
}

@cached
operation EClass getNodeSize() {
	var size := self.getAnnotationValue('gmf.node', 'size');
	if (not size.isDefined()) return size;
	else {
		var d : new GmfGraph!Dimension;
		d.dx := size.split(',').at(0).asInteger();
		d.dy := size.split(',').at(1).asInteger();
		return d;
	}
	
}

@cached
operation EClass getNodeSize() {
	var size := self.getAnnotationValue('gmf.node', 'size');
	if (not size.isDefined()) return size;
	else {
		var d : new GmfGraph!Dimension;
		d.dx := size.split(',').at(0).asInteger();
		d.dy := size.split(',').at(1).asInteger();
		return d;
	}
	
}
operation EClass getLinkEndFeature(name : String) {
	var featureName := self.getAnnotationValue('gmf.link', name);
	return self.eAllStructuralFeatures.selectOne(sf|sf.name = featureName);
}

@cached
operation EClass getLinkIncoming() : Boolean {
	return self.getAnnotationValue('gmf.link', 'incoming') = 'true';
}

@cached
operation EClass getLinkSourceFeature() {
	return self.getLinkEndFeature('source');
}

@cached
operation EClass getLinkTargetFeature() {
	return self.getLinkEndFeature('target');
}

@cached
operation EClass getSourceConstraint() {
	return self.getAnnotationValue('gmf.link', 'source.constraint');
}

@cached
operation EClass getTargetConstraint() {
	return self.getAnnotationValue('gmf.link', 'target.constraint');
}

@cached
operation EReference isLink() : Boolean {
	return self.isAnnotatedAs('gmf.link');
}

@cached
operation EClass isLink() : Boolean {
	
	if (self.abstract) return false;
	 
	var isLink := self.isAnnotatedAs('gmf.link');
	var isNoLink := self.isAnnotatedAs('gmf.nolink');
	
	if (isNoLink) return false;
	else if (isLink) return true;
	else return self.eSuperTypes.exists(s|s.isLink());
	
	return isLink;
}

@cached
operation EClass isNode() : Boolean {
	
	if (self.isLink()) return false;
	if (self.abstract) return false;
	
	var isNode := self.isAnnotatedAs('gmf.node');
	var isNoNode := self.isAnnotatedAs('gmf.nonode');
	
	if (isNoNode) return false;
	else if (isNode) return true;
	else return self.eSuperTypes.exists(s|s.isNode());
	
	return isNode;
}

@cached
operation EClass getLabelName() : String {
	return self.name + 'Label';
}

@cached
operation EClass getLabelPlacement() : String {
	var labelPosition := self.getAnnotationValue('gmf.node', 'label.placement');
	if (labelPosition.isUndefined()) {
		return 'internal';
	} else {
		return labelPosition;
	}
}

@cached
operation EClass labelHasIcon(defaultValue : Boolean) : Boolean {

	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	
	var hasIcon := self.getAnnotationValue(ann, 'label.icon');
	
	if (hasIcon.isUndefined()) return defaultValue;
	else if (hasIcon = 'true') return true;
	else return false;
	
}

@cached
operation EClass getLabelViewPattern() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	return self.getLabelViewPattern(ann);
}

@cached
operation EClass getLabelEditPattern() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	return self.getLabelEditPattern(ann);
}

@cached
operation EClass getLabelParser() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	return self.getLabelParser(ann);
}

@cached
operation EClass getLabelText() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';

	var customText := self.getAnnotationValue(ann, 'label.text');
	if (customText.isDefined()) {
		return customText;
	}
	else {
		return self.name;
	}
}

@cached
operation EClass isPhantom() {
	if (self.isNode()) {
		return self.getAnnotationValue('gmf.node', 'phantom') = 'true';
	}
	else {
		return false;
	}
}

operation EClass getLabelClass() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	
	return self.getAnnotationValue(ann, 'label.impl');
}

operation EClass getLabelAttributes() {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';

	return self.getLabelAttributes(ann);
}

@cached
operation EClass getLabelReadOnly() : Boolean {
	var ann : String;
	if (self.isNode()) ann := 'gmf.node';
	else ann := 'gmf.link';
	
	return self.getAnnotationValue(ann, 'label.readOnly') = 'true';
}

@cached
operation EAttribute isLabelled() : Boolean {
	return self.isAnnotatedAs('gmf.label');
}

@cached
operation EAttribute getLabelName() : String {
	return self.eContainingClass.name + self.name.firstToUpperCase() + 'Label';
}

@cached
operation EAttribute getReadOnly() : Boolean {
	return self.getAnnotationValue('gmf.label', 'readOnly') = 'true';
}

@cached
operation EAttribute getLabelViewPattern() {
	return self.getLabelViewPattern('gmf.label');
}

@cached
operation EAttribute getLabelEditPattern() {
	return self.getLabelEditPattern('gmf.label');
}

@cached
operation EAttribute getLabelParser() {
	return self.getLabelParser('gmf.label');
}

@cached
operation EAttribute getLabelAttributes() {
	return self.getLabelAttributes('gmf.label');
}

@cached
operation EAnnotation getDetail(key : String) : String {
	var detail := self.details.selectOne(d|d.key = key);
	if (detail.isDefined()) {return detail.value;}
	else {return null;}
}

operation EModelElement getLabelParser(ann: String) {
	return self.getAnnotationValue(ann, 'label.parser');
}

operation EModelElement getLabelEditPattern(ann: String) {
	return self.getLabelPattern(ann, 'label.edit.pattern', 'label.pattern');
}

operation EModelElement getLabelViewPattern(ann: String) {
	return self.getLabelPattern(ann, 'label.view.pattern', 'label.pattern');
}

operation EModelElement getLabelPattern(ann: String, subtype: String, fallback: String) {
	var pattern = self.getAnnotationValue(ann, subtype);
	if (pattern.isDefined()) {
		return pattern;
	} else {
		return self.getAnnotationValue(ann, fallback);
	}
}

operation EModelElement getLabelAttributes(ann: String) {
	var labelAnnotationValue := self.getAnnotationValue(ann, 'label');
	
	if (labelAnnotationValue.isDefined()) {
		var labels := labelAnnotationValue.split(',').collect(s|s.trim());
		return self.eAllStructuralFeatures.select(f|labels.exists(s|s = f.name));
	}
	else {
		return Sequence {};
	}
}

operation EModelElement getAnnotationValue(name : String, detail : String) : Any {
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det := ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}
	else if (self.isTypeOf(EClass)) {
		for (s in self.eSuperTypes) {
			var sann := s.getAnnotationValue(name, detail);
			if (sann.isDefined()) {
				return sann;
			}
		}
	}
	return det;	
}

operation EModelElement getOwnedAnnotationValue(name : String, detail : String) : Any {
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	var det;

	if (ann.isDefined()) {
		det := ann.details.selectOne(d|d.key = detail);
	}

	if (det.isDefined()) {
		return det.value;
	}
	return det;	
}

@cached
operation EModelElement getAnnotation(name : String) : EAnnotation {
	
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	
	if (self.isTypeOf(EClass) and ann.isUndefined()) {
		for (s in self.eSuperTypes) {
			var sann := s.getAnnotation(name);
			if (sann.isDefined()) return sann;
		}
	}
	
	return ann;
	
}

@cached
operation EModelElement getOwnedAnnotation(name : String) : EAnnotation {
	
	var ann := self.eAnnotations.selectOne(a|a.source = name);
	
	/*
	if (self.isTypeOf(EClass) and ann.isUndefined()) {
		for (s in self.eSuperTypes) {
			var sann := s.getAnnotation(name);
			if (sann.isDefined()) return sann;
		}
	}
	*/
	return ann;
	
}

@cached
operation EModelElement isAnnotatedAs(name : String) : Boolean {
	return self.getAnnotation(name).isDefined();
}

@cached
operation EModelElement isSelfAnnotatedAs(name : String) : Boolean {
	return self.getOwnedAnnotation(name).isDefined();
}



@cached
operation EReference isLabelled() : Boolean {
	return false;
}