[%
import "utils/utils.eol";


entity.name.errln();
entity.definition.errln();

var debug : Boolean = false;
var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreUtil = emfTool.ecoreUtil;

//type specific package
var package_string = "com.braintribe.di.iso20022.erepository.businesscomponents.model";
var import_business_attributes_string = "com.braintribe.di.iso20022.erepository.businessattributes."+entity.name.toLowerCase()+".model";
var import_business_associationends_string = "com.braintribe.di.iso20022.erepository.businessassociationends."+entity.name.toLowerCase()+".model";

var entity_name = entity.name;
var description = entity.definition;
var supertype_string = generateSuperTypesString(entity);

var elements = entity.element;
var business_attributes = entity.element.asSet().select(e|e.isTypeOf(BusinessAttribute));
var business_associationends = entity.element.asSet().select(e|e.isTypeOf(BusinessAssociationEnd));

%]
/*
Auto-generated code via model transformation (Eclipse Epsilon EGL/EGX).
Task: Cartridge Development - Data Model generation
This Java source artifact defines the Data Type [%=entity_name%] of the eRepositorty ISO20022 Data Model .

Author: Luca Berardinelli
Tool: Eclipse Epsilon
Template EGL: BusinessComponents2GmEntityType.egl
*/

package [%=package_string%];


import java.util.List;

import com.braintribe.model.generic.GenericEntity;
import com.braintribe.model.generic.reflection.EntityType;
import com.braintribe.model.generic.reflection.EntityTypes;

[%
// add import statements for properties only if they exist
if(not business_attributes.isEmpty()){
%]
import [%=import_business_attributes_string%].*;
[%
}

if(not business_associationends.isEmpty()){
%]
import [%=import_business_associationends_string%].*;
[%
}
%]

/**
 * @author luca.berardinelli
 */


/**
 * 
 * It consists of then following business attributes
 *
[%

//Adding structural feature names. 
//We assume that the feature names are compliant to naming conventions.
//If not defined, a default undefined name is added.

 //add list of properties and property names
for (business_attribute in business_attributes) {	
	 
%]
{@link [%= business_attribute.name%]},
[%	
}
%]
 *
 * It consists of then following business associations
 *
[%

//Adding structural feature names. 
//We assume that the feature names are compliant to naming conventions.
//If not defined, a default undefined name is added.

 //add list of properties and property names
for (business_association_end in business_associationends) {	
	 
%]
{@link [%= business_association_end.name%]},
[%	
}
%]
 *	
 * It provides of then following operations on business attributes (getters and setters)
 *
[%
 //add list of getters and setters
 
//We acccess the annotations but we do not use them at the moment
for (business_attribute in business_attributes) {
%]
{@link get[%= business_attribute.name.firstToUpperCase()%]_},
[%	
}
%]
[%
 //add list of getters and setters
for (business_attribute in business_attributes) { 
%]
{@link set[%= business_attribute.name.firstToUpperCase()%]_},
[%	
}
%]
 *
 * It provides of then following operations on business association ends (getters and setters)
 *
[%
 //add list of getters and setters
 
//We acccess the annotations but we do not use them at the moment
for (business_association_end in business_associationends) {
%]
{@link get[%= business_association_end.name.firstToUpperCase()%]_},
[%	
}
%]
[%
 //add list of getters and setters
for (business_association_end in business_associationends) {
%]
{@link set[%= business_association_end.name.firstToUpperCase()%]_},
[%	
}
%]
 */


/**
 * [%=entity_name%] 
 */
@com.braintribe.model.generic.annotation.meta.Description("[%=getSanitizedDescription(entity)%]")
public interface [%=entity_name%] extends GenericEntity[%= supertype_string%] {

	EntityType<[%=entity_name%]> T = EntityTypes.T([%=entity_name%].class);

	/* Constants for each property name. */
[%
 //add list of properties and property names
for (structural_feature in business_attributes) {
%]
	java.lang.String [%= structural_feature.name.asString().firstToLowerCase()%]_ = "[%= structural_feature.name%]_";
[%	
}
%]
[%
 //add list of properties and property names
for (structural_feature in business_associationends) {
%]
	java.lang.String [%= structural_feature.name.asString().firstToLowerCase()%]_ = "[%= structural_feature.name%]_";
[%	
}
%]


[% 
 //getters and setters for GmEntityType properties from BusinessAttributes 
 for (structural_feature in business_attributes) {

	var propertyDescription = structural_feature.definition; 
	
	//Policities to manage undefined multiplicities
	if(structural_feature.maxOccurs.isUndefined()) structural_feature.maxOccurs = -1; // if max occurs undefined then set to multivalued 
	if(structural_feature.minOccurs.isUndefined()) structural_feature.minOccurs = 0; // if max occurs undefined then set to multivalued 

%]
	/**
	 * definition: [%=propertyDescription%] 
	 * minOccurs: [%=structural_feature.minOccurs%]
	 * maxOccurs: [%=structural_feature.maxOccurs%]
	 */
[%
	var type = import_business_attributes_string + "." + structural_feature.name;
	

	//if optional or mandatory single-valued structural feature...
	if (structural_feature.maxOccurs > -1 and structural_feature.maxOccurs < 2) {
%]
	[%=type%] get[%= structural_feature.name.firstToUpperCase()%]_();
	void set[%= structural_feature.name.firstToUpperCase()%]_([%=type%] [%= structural_feature.name.firstToLowerCase()%]_);

[%			
	}
	//...else optional or mandatory multivalued structural feature
	else { 	 	
%]
	List<[%=type%]> get[%= structural_feature.name.firstToUpperCase()%]_();
	void set[%= structural_feature.name.firstToUpperCase()%]_(List<[%=type%]> [%= structural_feature.name.firstToLowerCase()%]_);
	
[%			
	} 
}
%]


[% 
 //getters and setters for GmEntityType properties from BusinessAssociationEnds
 for (structural_feature in business_associationends) {

	var propertyDescription = structural_feature.definition; 
	
	//Policities to manage undefined multiplicities
	if(structural_feature.maxOccurs.isUndefined()) structural_feature.maxOccurs = -1; // if max occurs undefined then set to multivalued 
	if(structural_feature.minOccurs.isUndefined()) structural_feature.minOccurs = 0; // if max occurs undefined then set to multivalued 

%]
	/**
	 * definition: [%=propertyDescription%] 
	 * minOccurs: [%=structural_feature.minOccurs%]
	 * maxOccurs: [%=structural_feature.maxOccurs%]
	 */
[%
	var type = import_business_associationends_string + "." + structural_feature.name;
	

	//if optional or mandatory single-valued structural feature...
	if (structural_feature.maxOccurs > -1 and structural_feature.maxOccurs < 2) {
%]
	[%=type%] get[%= structural_feature.name.firstToUpperCase()%]_();
	void set[%= structural_feature.name.firstToUpperCase()%]_([%=type%] [%= structural_feature.name.firstToLowerCase()%]_);

[%			
	}
	//...else optional or mandatory multivalued structural feature
	else { 	 	
%]
	List<[%=type%]> get[%= structural_feature.name.firstToUpperCase()%]_();
	void set[%= structural_feature.name.firstToUpperCase()%]_(List<[%=type%]> [%= structural_feature.name.firstToLowerCase()%]_);
	
[%			
	} 
}
%]




}
